- name: Get latest kubectl version
  uri:
    url: https://dl.k8s.io/release/stable.txt
    return_content: yes
  register: version

- name: Download the latest kubectl release
  uri:
    url: https://dl.k8s.io/release/{{ version.content }}/bin/linux/arm/kubectl
    dest: /home/{{ host_user }}
  register: kubectl

- name: Download the kubectl checksum file
  uri:
    url: https://dl.k8s.io/{{ version.content }}/bin/linux/arm/kubectl.sha256
    dest: /home/{{ host_user }}

- name: Download the kubectl checksum file
  uri:
    url: https://dl.k8s.io/{{ version.content }}/bin/linux/arm/kubectl.sha256
    dest: /home/{{ host_user }}

- name: Validate the kubectl binary against the checksum file
  shell: echo "$(cat kubectl.sha256)  kubectl" | sha256sum --check
  register: result

- name: Assert that the kubectl binary is OK
  vars:
    expected: "kubectl: OK"
  assert:
    that:
      - result.stdout == expected
    fail_msg: "{{ result.stdout }}"
    success_msg: "{{ result.stdout }}"

- name: Move kubectl and change permissions
  file:
    src: "{{ kubectl.path }}"
    dest: /usr/local/bin/kubectl
    state: hard
    owner: root
    group: root
    mode: "+x"

- name: Check if kubectl is installed
  shell: kubectl version --client
  register: client
  failed_when: client.rc > 1

# ---
# - name: K8s | Adding kubernetes apt key
#   ansible.builtin.apt_key:
#     url: "https://packages.cloud.google.com/apt/doc/apt-key.gpg"
#   become: true
#
# - name: K8s | Adding kubernetes apt repo
#   ansible.builtin.apt_repository:
#     repo: "deb https://apt.kubernetes.io/ kubernetes-xenial main"
#   become: true
#
# - name: K8s | Installing Kubernetes
#   ansible.builtin.apt:
#     name: "{{ item.name }}={{ item.version | default('*') }}"
#     state: present
#     force: true
#   become: true
#   loop: "{{ k8s.package_versions[ansible_hostname] | default(k8s.package_versions.default) }}"
#
# - name: K8s | Preventing unintended upgrades
#   ansible.builtin.dpkg_selections:
#     name: "{{ item.name }}"
#     selection: hold
#   become: true
#   loop: "{{ k8s.package_versions[ansible_hostname] | default(k8s.package_versions.default) }}"
#   when: item.version is defined

- name: K8s | Configure .kube/config
  block:
    - name: K8s | Ensure .kube directory exists
      ansible.builtin.file:
        path: "~/.kube"
        state: directory
        mode: "0755"

    - name: K8s | Copy .kube/config file
      ansible.builtin.copy:
        src: config
        dest: "~/.kube/config"
        mode: "0600"
